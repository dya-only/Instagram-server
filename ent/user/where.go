// Code generated by ent, DO NOT EDIT.

package user

import (
	"go-template/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.User {
	return predicate.User(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.User {
	return predicate.User(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.User {
	return predicate.User(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.User {
	return predicate.User(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.User {
	return predicate.User(sql.FieldLTE(FieldID, id))
}

// Avatar applies equality check predicate on the "avatar" field. It's identical to AvatarEQ.
func Avatar(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldAvatar, v))
}

// Email applies equality check predicate on the "email" field. It's identical to EmailEQ.
func Email(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldEmail, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldName, v))
}

// Username applies equality check predicate on the "username" field. It's identical to UsernameEQ.
func Username(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUsername, v))
}

// Password applies equality check predicate on the "password" field. It's identical to PasswordEQ.
func Password(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPassword, v))
}

// Bookmarks applies equality check predicate on the "bookmarks" field. It's identical to BookmarksEQ.
func Bookmarks(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldBookmarks, v))
}

// Likes applies equality check predicate on the "likes" field. It's identical to LikesEQ.
func Likes(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldLikes, v))
}

// Follower applies equality check predicate on the "follower" field. It's identical to FollowerEQ.
func Follower(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldFollower, v))
}

// Following applies equality check predicate on the "following" field. It's identical to FollowingEQ.
func Following(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldFollowing, v))
}

// CreateAt applies equality check predicate on the "create_at" field. It's identical to CreateAtEQ.
func CreateAt(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCreateAt, v))
}

// UpdateAt applies equality check predicate on the "update_at" field. It's identical to UpdateAtEQ.
func UpdateAt(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUpdateAt, v))
}

// AvatarEQ applies the EQ predicate on the "avatar" field.
func AvatarEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldAvatar, v))
}

// AvatarNEQ applies the NEQ predicate on the "avatar" field.
func AvatarNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldAvatar, v))
}

// AvatarIn applies the In predicate on the "avatar" field.
func AvatarIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldAvatar, vs...))
}

// AvatarNotIn applies the NotIn predicate on the "avatar" field.
func AvatarNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldAvatar, vs...))
}

// AvatarGT applies the GT predicate on the "avatar" field.
func AvatarGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldAvatar, v))
}

// AvatarGTE applies the GTE predicate on the "avatar" field.
func AvatarGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldAvatar, v))
}

// AvatarLT applies the LT predicate on the "avatar" field.
func AvatarLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldAvatar, v))
}

// AvatarLTE applies the LTE predicate on the "avatar" field.
func AvatarLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldAvatar, v))
}

// AvatarContains applies the Contains predicate on the "avatar" field.
func AvatarContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldAvatar, v))
}

// AvatarHasPrefix applies the HasPrefix predicate on the "avatar" field.
func AvatarHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldAvatar, v))
}

// AvatarHasSuffix applies the HasSuffix predicate on the "avatar" field.
func AvatarHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldAvatar, v))
}

// AvatarEqualFold applies the EqualFold predicate on the "avatar" field.
func AvatarEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldAvatar, v))
}

// AvatarContainsFold applies the ContainsFold predicate on the "avatar" field.
func AvatarContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldAvatar, v))
}

// EmailEQ applies the EQ predicate on the "email" field.
func EmailEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldEmail, v))
}

// EmailNEQ applies the NEQ predicate on the "email" field.
func EmailNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldEmail, v))
}

// EmailIn applies the In predicate on the "email" field.
func EmailIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldEmail, vs...))
}

// EmailNotIn applies the NotIn predicate on the "email" field.
func EmailNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldEmail, vs...))
}

// EmailGT applies the GT predicate on the "email" field.
func EmailGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldEmail, v))
}

// EmailGTE applies the GTE predicate on the "email" field.
func EmailGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldEmail, v))
}

// EmailLT applies the LT predicate on the "email" field.
func EmailLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldEmail, v))
}

// EmailLTE applies the LTE predicate on the "email" field.
func EmailLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldEmail, v))
}

// EmailContains applies the Contains predicate on the "email" field.
func EmailContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldEmail, v))
}

// EmailHasPrefix applies the HasPrefix predicate on the "email" field.
func EmailHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldEmail, v))
}

// EmailHasSuffix applies the HasSuffix predicate on the "email" field.
func EmailHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldEmail, v))
}

// EmailEqualFold applies the EqualFold predicate on the "email" field.
func EmailEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldEmail, v))
}

// EmailContainsFold applies the ContainsFold predicate on the "email" field.
func EmailContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldEmail, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldName, v))
}

// UsernameEQ applies the EQ predicate on the "username" field.
func UsernameEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUsername, v))
}

// UsernameNEQ applies the NEQ predicate on the "username" field.
func UsernameNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldUsername, v))
}

// UsernameIn applies the In predicate on the "username" field.
func UsernameIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldUsername, vs...))
}

// UsernameNotIn applies the NotIn predicate on the "username" field.
func UsernameNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldUsername, vs...))
}

// UsernameGT applies the GT predicate on the "username" field.
func UsernameGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldUsername, v))
}

// UsernameGTE applies the GTE predicate on the "username" field.
func UsernameGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldUsername, v))
}

// UsernameLT applies the LT predicate on the "username" field.
func UsernameLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldUsername, v))
}

// UsernameLTE applies the LTE predicate on the "username" field.
func UsernameLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldUsername, v))
}

// UsernameContains applies the Contains predicate on the "username" field.
func UsernameContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldUsername, v))
}

// UsernameHasPrefix applies the HasPrefix predicate on the "username" field.
func UsernameHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldUsername, v))
}

// UsernameHasSuffix applies the HasSuffix predicate on the "username" field.
func UsernameHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldUsername, v))
}

// UsernameEqualFold applies the EqualFold predicate on the "username" field.
func UsernameEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldUsername, v))
}

// UsernameContainsFold applies the ContainsFold predicate on the "username" field.
func UsernameContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldUsername, v))
}

// PasswordEQ applies the EQ predicate on the "password" field.
func PasswordEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPassword, v))
}

// PasswordNEQ applies the NEQ predicate on the "password" field.
func PasswordNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldPassword, v))
}

// PasswordIn applies the In predicate on the "password" field.
func PasswordIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldPassword, vs...))
}

// PasswordNotIn applies the NotIn predicate on the "password" field.
func PasswordNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldPassword, vs...))
}

// PasswordGT applies the GT predicate on the "password" field.
func PasswordGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldPassword, v))
}

// PasswordGTE applies the GTE predicate on the "password" field.
func PasswordGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldPassword, v))
}

// PasswordLT applies the LT predicate on the "password" field.
func PasswordLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldPassword, v))
}

// PasswordLTE applies the LTE predicate on the "password" field.
func PasswordLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldPassword, v))
}

// PasswordContains applies the Contains predicate on the "password" field.
func PasswordContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldPassword, v))
}

// PasswordHasPrefix applies the HasPrefix predicate on the "password" field.
func PasswordHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldPassword, v))
}

// PasswordHasSuffix applies the HasSuffix predicate on the "password" field.
func PasswordHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldPassword, v))
}

// PasswordEqualFold applies the EqualFold predicate on the "password" field.
func PasswordEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldPassword, v))
}

// PasswordContainsFold applies the ContainsFold predicate on the "password" field.
func PasswordContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldPassword, v))
}

// BookmarksEQ applies the EQ predicate on the "bookmarks" field.
func BookmarksEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldBookmarks, v))
}

// BookmarksNEQ applies the NEQ predicate on the "bookmarks" field.
func BookmarksNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldBookmarks, v))
}

// BookmarksIn applies the In predicate on the "bookmarks" field.
func BookmarksIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldBookmarks, vs...))
}

// BookmarksNotIn applies the NotIn predicate on the "bookmarks" field.
func BookmarksNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldBookmarks, vs...))
}

// BookmarksGT applies the GT predicate on the "bookmarks" field.
func BookmarksGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldBookmarks, v))
}

// BookmarksGTE applies the GTE predicate on the "bookmarks" field.
func BookmarksGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldBookmarks, v))
}

// BookmarksLT applies the LT predicate on the "bookmarks" field.
func BookmarksLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldBookmarks, v))
}

// BookmarksLTE applies the LTE predicate on the "bookmarks" field.
func BookmarksLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldBookmarks, v))
}

// BookmarksContains applies the Contains predicate on the "bookmarks" field.
func BookmarksContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldBookmarks, v))
}

// BookmarksHasPrefix applies the HasPrefix predicate on the "bookmarks" field.
func BookmarksHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldBookmarks, v))
}

// BookmarksHasSuffix applies the HasSuffix predicate on the "bookmarks" field.
func BookmarksHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldBookmarks, v))
}

// BookmarksEqualFold applies the EqualFold predicate on the "bookmarks" field.
func BookmarksEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldBookmarks, v))
}

// BookmarksContainsFold applies the ContainsFold predicate on the "bookmarks" field.
func BookmarksContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldBookmarks, v))
}

// LikesEQ applies the EQ predicate on the "likes" field.
func LikesEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldLikes, v))
}

// LikesNEQ applies the NEQ predicate on the "likes" field.
func LikesNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldLikes, v))
}

// LikesIn applies the In predicate on the "likes" field.
func LikesIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldLikes, vs...))
}

// LikesNotIn applies the NotIn predicate on the "likes" field.
func LikesNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldLikes, vs...))
}

// LikesGT applies the GT predicate on the "likes" field.
func LikesGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldLikes, v))
}

// LikesGTE applies the GTE predicate on the "likes" field.
func LikesGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldLikes, v))
}

// LikesLT applies the LT predicate on the "likes" field.
func LikesLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldLikes, v))
}

// LikesLTE applies the LTE predicate on the "likes" field.
func LikesLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldLikes, v))
}

// LikesContains applies the Contains predicate on the "likes" field.
func LikesContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldLikes, v))
}

// LikesHasPrefix applies the HasPrefix predicate on the "likes" field.
func LikesHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldLikes, v))
}

// LikesHasSuffix applies the HasSuffix predicate on the "likes" field.
func LikesHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldLikes, v))
}

// LikesEqualFold applies the EqualFold predicate on the "likes" field.
func LikesEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldLikes, v))
}

// LikesContainsFold applies the ContainsFold predicate on the "likes" field.
func LikesContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldLikes, v))
}

// FollowerEQ applies the EQ predicate on the "follower" field.
func FollowerEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldFollower, v))
}

// FollowerNEQ applies the NEQ predicate on the "follower" field.
func FollowerNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldFollower, v))
}

// FollowerIn applies the In predicate on the "follower" field.
func FollowerIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldFollower, vs...))
}

// FollowerNotIn applies the NotIn predicate on the "follower" field.
func FollowerNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldFollower, vs...))
}

// FollowerGT applies the GT predicate on the "follower" field.
func FollowerGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldFollower, v))
}

// FollowerGTE applies the GTE predicate on the "follower" field.
func FollowerGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldFollower, v))
}

// FollowerLT applies the LT predicate on the "follower" field.
func FollowerLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldFollower, v))
}

// FollowerLTE applies the LTE predicate on the "follower" field.
func FollowerLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldFollower, v))
}

// FollowerContains applies the Contains predicate on the "follower" field.
func FollowerContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldFollower, v))
}

// FollowerHasPrefix applies the HasPrefix predicate on the "follower" field.
func FollowerHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldFollower, v))
}

// FollowerHasSuffix applies the HasSuffix predicate on the "follower" field.
func FollowerHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldFollower, v))
}

// FollowerEqualFold applies the EqualFold predicate on the "follower" field.
func FollowerEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldFollower, v))
}

// FollowerContainsFold applies the ContainsFold predicate on the "follower" field.
func FollowerContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldFollower, v))
}

// FollowingEQ applies the EQ predicate on the "following" field.
func FollowingEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldFollowing, v))
}

// FollowingNEQ applies the NEQ predicate on the "following" field.
func FollowingNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldFollowing, v))
}

// FollowingIn applies the In predicate on the "following" field.
func FollowingIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldFollowing, vs...))
}

// FollowingNotIn applies the NotIn predicate on the "following" field.
func FollowingNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldFollowing, vs...))
}

// FollowingGT applies the GT predicate on the "following" field.
func FollowingGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldFollowing, v))
}

// FollowingGTE applies the GTE predicate on the "following" field.
func FollowingGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldFollowing, v))
}

// FollowingLT applies the LT predicate on the "following" field.
func FollowingLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldFollowing, v))
}

// FollowingLTE applies the LTE predicate on the "following" field.
func FollowingLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldFollowing, v))
}

// FollowingContains applies the Contains predicate on the "following" field.
func FollowingContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldFollowing, v))
}

// FollowingHasPrefix applies the HasPrefix predicate on the "following" field.
func FollowingHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldFollowing, v))
}

// FollowingHasSuffix applies the HasSuffix predicate on the "following" field.
func FollowingHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldFollowing, v))
}

// FollowingEqualFold applies the EqualFold predicate on the "following" field.
func FollowingEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldFollowing, v))
}

// FollowingContainsFold applies the ContainsFold predicate on the "following" field.
func FollowingContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldFollowing, v))
}

// CreateAtEQ applies the EQ predicate on the "create_at" field.
func CreateAtEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCreateAt, v))
}

// CreateAtNEQ applies the NEQ predicate on the "create_at" field.
func CreateAtNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldCreateAt, v))
}

// CreateAtIn applies the In predicate on the "create_at" field.
func CreateAtIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldCreateAt, vs...))
}

// CreateAtNotIn applies the NotIn predicate on the "create_at" field.
func CreateAtNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldCreateAt, vs...))
}

// CreateAtGT applies the GT predicate on the "create_at" field.
func CreateAtGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldCreateAt, v))
}

// CreateAtGTE applies the GTE predicate on the "create_at" field.
func CreateAtGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldCreateAt, v))
}

// CreateAtLT applies the LT predicate on the "create_at" field.
func CreateAtLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldCreateAt, v))
}

// CreateAtLTE applies the LTE predicate on the "create_at" field.
func CreateAtLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldCreateAt, v))
}

// UpdateAtEQ applies the EQ predicate on the "update_at" field.
func UpdateAtEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUpdateAt, v))
}

// UpdateAtNEQ applies the NEQ predicate on the "update_at" field.
func UpdateAtNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldUpdateAt, v))
}

// UpdateAtIn applies the In predicate on the "update_at" field.
func UpdateAtIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldUpdateAt, vs...))
}

// UpdateAtNotIn applies the NotIn predicate on the "update_at" field.
func UpdateAtNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldUpdateAt, vs...))
}

// UpdateAtGT applies the GT predicate on the "update_at" field.
func UpdateAtGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldUpdateAt, v))
}

// UpdateAtGTE applies the GTE predicate on the "update_at" field.
func UpdateAtGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldUpdateAt, v))
}

// UpdateAtLT applies the LT predicate on the "update_at" field.
func UpdateAtLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldUpdateAt, v))
}

// UpdateAtLTE applies the LTE predicate on the "update_at" field.
func UpdateAtLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldUpdateAt, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.User) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.User) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.User) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		p(s.Not())
	})
}
