// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"go-template/ent/post"
	"go-template/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PostUpdate is the builder for updating Post entities.
type PostUpdate struct {
	config
	hooks    []Hook
	mutation *PostMutation
}

// Where appends a list predicates to the PostUpdate builder.
func (pu *PostUpdate) Where(ps ...predicate.Post) *PostUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetImg sets the "img" field.
func (pu *PostUpdate) SetImg(s string) *PostUpdate {
	pu.mutation.SetImg(s)
	return pu
}

// SetContent sets the "content" field.
func (pu *PostUpdate) SetContent(s string) *PostUpdate {
	pu.mutation.SetContent(s)
	return pu
}

// SetAuthor sets the "author" field.
func (pu *PostUpdate) SetAuthor(i int) *PostUpdate {
	pu.mutation.ResetAuthor()
	pu.mutation.SetAuthor(i)
	return pu
}

// AddAuthor adds i to the "author" field.
func (pu *PostUpdate) AddAuthor(i int) *PostUpdate {
	pu.mutation.AddAuthor(i)
	return pu
}

// SetLikes sets the "likes" field.
func (pu *PostUpdate) SetLikes(i int) *PostUpdate {
	pu.mutation.ResetLikes()
	pu.mutation.SetLikes(i)
	return pu
}

// AddLikes adds i to the "likes" field.
func (pu *PostUpdate) AddLikes(i int) *PostUpdate {
	pu.mutation.AddLikes(i)
	return pu
}

// SetCreateAt sets the "create_at" field.
func (pu *PostUpdate) SetCreateAt(t time.Time) *PostUpdate {
	pu.mutation.SetCreateAt(t)
	return pu
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (pu *PostUpdate) SetNillableCreateAt(t *time.Time) *PostUpdate {
	if t != nil {
		pu.SetCreateAt(*t)
	}
	return pu
}

// SetUpdateAt sets the "update_at" field.
func (pu *PostUpdate) SetUpdateAt(t time.Time) *PostUpdate {
	pu.mutation.SetUpdateAt(t)
	return pu
}

// Mutation returns the PostMutation object of the builder.
func (pu *PostUpdate) Mutation() *PostMutation {
	return pu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PostUpdate) Save(ctx context.Context) (int, error) {
	pu.defaults()
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PostUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PostUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PostUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pu *PostUpdate) defaults() {
	if _, ok := pu.mutation.UpdateAt(); !ok {
		v := post.UpdateDefaultUpdateAt()
		pu.mutation.SetUpdateAt(v)
	}
}

func (pu *PostUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(post.Table, post.Columns, sqlgraph.NewFieldSpec(post.FieldID, field.TypeInt))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.Img(); ok {
		_spec.SetField(post.FieldImg, field.TypeString, value)
	}
	if value, ok := pu.mutation.Content(); ok {
		_spec.SetField(post.FieldContent, field.TypeString, value)
	}
	if value, ok := pu.mutation.Author(); ok {
		_spec.SetField(post.FieldAuthor, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedAuthor(); ok {
		_spec.AddField(post.FieldAuthor, field.TypeInt, value)
	}
	if value, ok := pu.mutation.Likes(); ok {
		_spec.SetField(post.FieldLikes, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedLikes(); ok {
		_spec.AddField(post.FieldLikes, field.TypeInt, value)
	}
	if value, ok := pu.mutation.CreateAt(); ok {
		_spec.SetField(post.FieldCreateAt, field.TypeTime, value)
	}
	if value, ok := pu.mutation.UpdateAt(); ok {
		_spec.SetField(post.FieldUpdateAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{post.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// PostUpdateOne is the builder for updating a single Post entity.
type PostUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PostMutation
}

// SetImg sets the "img" field.
func (puo *PostUpdateOne) SetImg(s string) *PostUpdateOne {
	puo.mutation.SetImg(s)
	return puo
}

// SetContent sets the "content" field.
func (puo *PostUpdateOne) SetContent(s string) *PostUpdateOne {
	puo.mutation.SetContent(s)
	return puo
}

// SetAuthor sets the "author" field.
func (puo *PostUpdateOne) SetAuthor(i int) *PostUpdateOne {
	puo.mutation.ResetAuthor()
	puo.mutation.SetAuthor(i)
	return puo
}

// AddAuthor adds i to the "author" field.
func (puo *PostUpdateOne) AddAuthor(i int) *PostUpdateOne {
	puo.mutation.AddAuthor(i)
	return puo
}

// SetLikes sets the "likes" field.
func (puo *PostUpdateOne) SetLikes(i int) *PostUpdateOne {
	puo.mutation.ResetLikes()
	puo.mutation.SetLikes(i)
	return puo
}

// AddLikes adds i to the "likes" field.
func (puo *PostUpdateOne) AddLikes(i int) *PostUpdateOne {
	puo.mutation.AddLikes(i)
	return puo
}

// SetCreateAt sets the "create_at" field.
func (puo *PostUpdateOne) SetCreateAt(t time.Time) *PostUpdateOne {
	puo.mutation.SetCreateAt(t)
	return puo
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (puo *PostUpdateOne) SetNillableCreateAt(t *time.Time) *PostUpdateOne {
	if t != nil {
		puo.SetCreateAt(*t)
	}
	return puo
}

// SetUpdateAt sets the "update_at" field.
func (puo *PostUpdateOne) SetUpdateAt(t time.Time) *PostUpdateOne {
	puo.mutation.SetUpdateAt(t)
	return puo
}

// Mutation returns the PostMutation object of the builder.
func (puo *PostUpdateOne) Mutation() *PostMutation {
	return puo.mutation
}

// Where appends a list predicates to the PostUpdate builder.
func (puo *PostUpdateOne) Where(ps ...predicate.Post) *PostUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PostUpdateOne) Select(field string, fields ...string) *PostUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Post entity.
func (puo *PostUpdateOne) Save(ctx context.Context) (*Post, error) {
	puo.defaults()
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PostUpdateOne) SaveX(ctx context.Context) *Post {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PostUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PostUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (puo *PostUpdateOne) defaults() {
	if _, ok := puo.mutation.UpdateAt(); !ok {
		v := post.UpdateDefaultUpdateAt()
		puo.mutation.SetUpdateAt(v)
	}
}

func (puo *PostUpdateOne) sqlSave(ctx context.Context) (_node *Post, err error) {
	_spec := sqlgraph.NewUpdateSpec(post.Table, post.Columns, sqlgraph.NewFieldSpec(post.FieldID, field.TypeInt))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Post.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, post.FieldID)
		for _, f := range fields {
			if !post.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != post.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.Img(); ok {
		_spec.SetField(post.FieldImg, field.TypeString, value)
	}
	if value, ok := puo.mutation.Content(); ok {
		_spec.SetField(post.FieldContent, field.TypeString, value)
	}
	if value, ok := puo.mutation.Author(); ok {
		_spec.SetField(post.FieldAuthor, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedAuthor(); ok {
		_spec.AddField(post.FieldAuthor, field.TypeInt, value)
	}
	if value, ok := puo.mutation.Likes(); ok {
		_spec.SetField(post.FieldLikes, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedLikes(); ok {
		_spec.AddField(post.FieldLikes, field.TypeInt, value)
	}
	if value, ok := puo.mutation.CreateAt(); ok {
		_spec.SetField(post.FieldCreateAt, field.TypeTime, value)
	}
	if value, ok := puo.mutation.UpdateAt(); ok {
		_spec.SetField(post.FieldUpdateAt, field.TypeTime, value)
	}
	_node = &Post{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{post.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
